'''
Created on Mar 6, 2015
Updated on Apr 8, 2015

@author: Taylor Flatt
'''
import pygame, sys, TextInputManager, Menu
from Menu import *
from Colors import *

'''
Main Parameters
'''
pygame.init()
clock = pygame.time.Clock()
WINDOW_TITLE = "Window Title Goes Here"
pygame.display.set_caption(WINDOW_TITLE)

'''''''''''''''
GLOBAL STATICS
'''''''''''''''

'''
MAIN
'''
'''
Will change this to 1280x720 but it is easier to demo in a smaller size and I will need to change my 
coords for the different screen size. When I change them, I will do them based on percentages.
'''
SCREEN_WIDTH = 800
SCREEN_HEIGHT = 800
screen = pygame.display.set_mode((SCREEN_WIDTH, SCREEN_HEIGHT))

'''
PLAYER
'''

'''
Don't forget to change the numbers in the character creation if you decide to change this number
'''
MAX_NAME_LENGTH = 13

def main():
    ''''''             ''''''
    ''' Pre-loop Variables'''
    ''''''             ''''''
    
    '''
    @var state: Default set to TITLE since that is the first game state we want the player to see.
    @var keyboard: Sets up a variable to check if a key is pressed so I can do comparisons in conditionals later.
    @var pauseState: Default set to False so the game is not paused and can be toggled by player input later.
    @var enteredName: Defaulted to False. Checks if the player's name has been fully entered (i.e the player has or has not pressed enter. So we can run a while).
    @static GAME_DIFFICULTY: The default difficulty is set to 1 (otherwise easy) and changes based on user changes later.
    @var menu: Creates a menu object so we can check and change the game state.
    '''
    state = TITLE
    keyboard = pygame.key.get_pressed()
    pauseState = False
    enteredName = False
    GAME_DIFFICULTY = 1
    menu = Menu(state)
    
    while(True):
        screen.fill(Color.black)
        msElapsed = clock.tick(30)
        menu.checkPaused(menu.getState(), pauseState)      
        
        if(menu.getState() == TITLE):
            
            displayTitle = fontMainTitle.render("[Game Title]", True, Color.white)
            displayContinue = fontSubTitle.render("Press any key to continue!", True, Color.white)
            
            screen.blit(displayTitle, (((SCREEN_WIDTH / 2) - displayTitle.get_width() / 2), (SCREEN_HEIGHT / 2 - 150)))
            screen.blit(displayContinue, (((SCREEN_WIDTH / 2) - displayContinue.get_width() / 2), (SCREEN_HEIGHT - 100)))

            for event in pygame.event.get():
                
                '''If enter is not pressed, it doesn't skip name creation. Otherwise it somehow does. Need to figure that out. Temp fix below.'''
                if(event.type == pygame.KEYDOWN):
                    state = menu.setState(CREATION)
                
                elif(event.type == pygame.QUIT):
                    pygame.quit; sys.exit();
                    
                        
        if(menu.getState() == CREATION):
            screen.fill(Color.black)     
                
            dispMenuTitle = fontTitle.render("Player Creation", True, Color.white)
            dispMenuDirections = fontDirections.render("Welcome to Game! To begin, please enter a name and then simply press enter after you are satisfied!", True, Color.white)
            
            '''Don't forget to put the keywords or won't work!'''
            enterNameField = TextInputManager.Input(x=260, y=340, maxlength=MAX_NAME_LENGTH, color=Color.white, font=fontPlayerEnterName, prompt='Name: ' )
            
            screen.blit(dispMenuTitle, (((SCREEN_WIDTH / 2) - dispMenuTitle.get_width() / 2), (SCREEN_HEIGHT / 2 - 300)))
            screen.blit(dispMenuDirections, (((SCREEN_WIDTH / 2) - 50 - dispMenuDirections.get_width() / 2), (SCREEN_HEIGHT / 2 - 100)))
            
            while(enteredName == False):
                events = pygame.event.get() #Sets variable events so we can access our key presses

                '''Extra events MUST go between my events declaration and the update to my textbox. If not, weird things will happen.'''
                '''ALLOW EXIT'''
                for event in events:
                    if event.type == QUIT: return

                if(enterNameField.getCharAmount() < 3 or enterNameField.getCharAmount() > 9):
                    screen.fill(Color.black) #Fill the screen so it will reflect the character that is removed.
                    
                    charRemainingMath = 13 - enterNameField.getCharAmount() #Does math for remaining characters
                    displayCharRemaining = fontSubTitle.render(str(charRemainingMath) + " Characters left", True, Color.maroon)
                    
                    screen.blit(dispMenuTitle, (((SCREEN_WIDTH / 2) - dispMenuTitle.get_width() / 2), (SCREEN_HEIGHT / 2 - 250))) #Redisplay
                    screen.blit(dispMenuDirections, (((SCREEN_WIDTH / 2) - 50 - dispMenuDirections.get_width() / 2), (SCREEN_HEIGHT / 2 - 100))) #Redisplay
                    screen.blit(displayCharRemaining, (SCREEN_WIDTH - displayCharRemaining.get_width() - 10, (SCREEN_HEIGHT - 50)))
                
                else:
                    screen.fill(Color.black) #Fill the screen so it will reflect the character that is removed.
                    
                    charRemainingMath = 13 - enterNameField.getCharAmount() #Does math for remaining characters
                    displayCharRemaining = fontSubTitle.render(str(charRemainingMath) + " Characters left", True, Color.white)
                    
                    screen.blit(dispMenuTitle, (((SCREEN_WIDTH / 2) - dispMenuTitle.get_width() / 2), (SCREEN_HEIGHT / 2 - 250))) #Redisplay
                    screen.blit(dispMenuDirections, (((SCREEN_WIDTH / 2) - 50 - dispMenuDirections.get_width() / 2), (SCREEN_HEIGHT / 2 - 100))) #Redisplay
                    screen.blit(displayCharRemaining, (SCREEN_WIDTH - displayCharRemaining.get_width() - 10, (SCREEN_HEIGHT - 50)))
                
                    
                if((menu.isKeyPressed(pygame.K_RETURN) == True or menu.isKeyPressed(pygame.K_KP_ENTER)) and enterNameField.getCharAmount() >= 3):
                    playerName = enterNameField.update(events) #Sets the player name so we can use it elsewhere
                    menu.setState(MAIN) #Changes the game state to MAIN so we exit this game state.
                    enteredName = True #Allows me to exit my while loop.
                
                #ALlows me to backspace, removing characters (showing their removal by filling the screen), then redisplaying the text on the screen.
                elif(menu.isKeyPressed(pygame.K_BACKSPACE) == True):
                    screen.fill(Color.black) #Fill the screen so it will reflect the character that is removed.
                    
                    charRemainingMath = 13 - enterNameField.getCharAmount() #Redisplay
                    displayCharRemaining = fontSubTitle.render(str(charRemainingMath) + " Characters left", True, Color.maroon) #Redisplay
                    screen.blit(displayCharRemaining, (SCREEN_WIDTH - displayCharRemaining.get_width() - 10, (SCREEN_HEIGHT - 50))) #Redisplay
                    screen.blit(dispMenuTitle, (((SCREEN_WIDTH / 2) - dispMenuTitle.get_width() / 2), (SCREEN_HEIGHT / 2 - 250))) #Redisplay
                    screen.blit(dispMenuDirections, (((SCREEN_WIDTH / 2) - 50 - dispMenuDirections.get_width() / 2), (SCREEN_HEIGHT / 2 - 100))) #Redisplay

                enterNameField.update(events) #Adds the keys to the event array
                enterNameField.draw(screen) #Draws the keys
                pygame.display.flip() #Refresh the screen
                
        if(menu.getState() == MAIN):
            '''
            Statics for the menu items
            
            @todo: Place text on the screen based on percentages so resizing screen later is an option. Then I can reference the x coordinates based on those 
            percentages and then use the font size (the height) to check the height.
            '''
            '''
            GAME MOUSE_OVER STATICS
            '''
            leastX_GAME = 364
            mostX_GAME = 440
            leastY_GAME = 250
            mostY_GAME = 283
            
            '''
            SETTINGS MOUSE_OVER STATICS
            '''
            leastX_SETTINGS = 329
            mostX_SETTINGS = 468
            leastY_SETTINGS = 297
            mostY_SETTINGS = 340
            
            '''
            CREDITS MOUSE_OVER STATICS
            '''
            leastX_CREDITS = 335
            mostX_CREDITS = 463
            leastY_CREDITS = 349
            mostY_CREDITS = 380
            
            (mouseX, mouseY) = pygame.mouse.get_pos()
            
            #Need to poll my events
            for mainMenuEvent in pygame.event.get():
                    if mainMenuEvent.type == pygame.MOUSEBUTTONDOWN:
                        
                        '''GAME STATE'''
                        if(mouseX >= leastX_GAME and mouseX < mostX_GAME and mouseY >= leastY_GAME and mouseY < mostY_GAME):
                            menu.setState(GAME)
                                
                        '''SETTINGS STATE'''
                        if(mouseX >= leastX_SETTINGS and mouseX < mostX_SETTINGS and mouseY >= leastY_SETTINGS and mouseY < mostY_SETTINGS):
                            menu.setState(SETTINGS)
                            
                        '''CREDITS STATE'''
                        if(mouseX >= leastX_CREDITS and mouseX < mostX_CREDITS and mouseY >= leastY_CREDITS and mouseY < mostY_CREDITS):
                            menu.setState(CREDITS)
                            
                        '''ALLOW EXIT'''
                    elif mainMenuEvent.type == pygame.QUIT:
                        pygame.quit(); sys.exit();

            dispPlayerName = fontParagraph.render("Player: " + playerName, True, Color.gold)
            dispMenuTitle = fontTitle.render("Main Menu", True, Color.white)
            dispMenuOptionPlay = fontTitle.render("Play", True, Color.white)
            dispMenuOptionSettings = fontTitle.render("Settings", True, Color.white)
            dispMenuCredits = fontTitle.render("Credits", True, Color.white)
            
            screen.blit(dispPlayerName, ((SCREEN_WIDTH - dispPlayerName.get_width() - 5), 20))
            screen.blit(dispMenuTitle, (((SCREEN_WIDTH / 2) - dispMenuTitle.get_width() / 2), (SCREEN_HEIGHT / 2 - 250)))
            screen.blit(dispMenuOptionPlay, (((SCREEN_WIDTH / 2)- dispMenuOptionPlay.get_width() / 2), (SCREEN_HEIGHT / 2 - 150)))
            screen.blit(dispMenuOptionSettings, (((SCREEN_WIDTH / 2)- dispMenuOptionSettings.get_width() / 2), (SCREEN_HEIGHT / 2 - 100)))
            screen.blit(dispMenuCredits, (((SCREEN_WIDTH / 2)- dispMenuCredits.get_width() / 2), (SCREEN_HEIGHT / 2 - 50)))

        '''
        @todo: I want to add borders around the text so it looks like a menu box. Shouldn't be too hard. That will come later.
        '''
        if(menu.getState() == SETTINGS):           
            '''
            CHOOSE DIFFICULTY MOUSE_OVER STATICS
            '''
            leastX_DIFF = 330
            mostX_DIFF = 536
            leastY_DIFF = 250
            mostY_DIFF = 280
            
            '''
            REMAP KEYS MOUSE_OVER STATICS
            '''
            leastX_REMAP = 327
            mostX_REMAP = 475
            leastY_REMAP = 300
            mostY_REMAP = 331
            
            '''
            MAIN MENU (BACK) MOUSE_OVER STATICS
            '''
            leastX_SETTINGS_BACK = 64
            mostX_SETTINGS_BACK = 247
            leastY_SETTINGS_BACK = 693
            mostY_SETTINGS_BACK = 740
            
            (mouseX, mouseY) = pygame.mouse.get_pos()
            
            for settingsMenuEvent in pygame.event.get():
                    if settingsMenuEvent.type == pygame.MOUSEBUTTONDOWN:
                        
                        '''DIFFICULTY STATE'''
                        if(mouseX >= leastX_DIFF and mouseX < mostX_DIFF and mouseY >= leastY_DIFF and mouseY < mostY_DIFF):
                            menu.setState(DIFFICULTY)
                                
                        '''REBIND KEYS STATE'''
                        if(mouseX >= leastX_REMAP and mouseX < mostX_REMAP and mouseY >= leastY_REMAP and mouseY < mostY_REMAP):
                            menu.setState(REBIND_KEYS)
                            
                        '''MAIN MENU STATE'''
                        if(mouseX >= leastX_SETTINGS_BACK and mouseX < mostX_SETTINGS_BACK and mouseY >= leastY_SETTINGS_BACK and mouseY < mostY_SETTINGS_BACK or keyboard[pygame.K_BACKSPACE] == True 
                           or keyboard[pygame.K_ESCAPE] == True):
                            menu.setState(MAIN)
                            
                            '''ALLOW EXIT'''
                    elif settingsMenuEvent.type == pygame.QUIT:
                        pygame.quit(); sys.exit();
            
            dispPlayerName = fontParagraph.render("Player: " + playerName, True, Color.gold)
            dispSettingsTitle = fontTitle.render("Settings Menu", True, Color.white)
            dispSettingsDifficulty = fontSubTitle.render("Choose Difficulty", True, Color.white)
            dispSettingsRemap = fontSubTitle.render("Remap Keys", True, Color.white)
            dispSettingsBack = fontSubTitle.render("< Main Menu", True, Color.white)
            
            screen.blit(dispPlayerName, ((SCREEN_WIDTH - dispPlayerName.get_width() - 5), 20))
            screen.blit(dispSettingsTitle, (((SCREEN_WIDTH / 2) - dispSettingsTitle.get_width() / 2), (SCREEN_HEIGHT / 2 - 250)))
            screen.blit(dispSettingsDifficulty, (((SCREEN_WIDTH / 2)- dispMenuOptionPlay.get_width() / 2 - 35), (SCREEN_HEIGHT/2 - 150)))
            screen.blit(dispSettingsRemap, (((SCREEN_WIDTH / 2)- dispSettingsRemap.get_width() / 2), (SCREEN_HEIGHT / 2 - 100)))
            screen.blit(dispSettingsBack, (((SCREEN_WIDTH / 5)- dispSettingsBack.get_width() / 2), (SCREEN_HEIGHT - 100)))
                
        '''Also wanna add ability to change difficulty via pause menu during game maybe?'''
        if(menu.getState() == DIFFICULTY):
            '''
            EASY MOUSE_OVER STATICS
            '''
            leastX_EASY = 365
            mostX_EASY = 433
            leastY_EASY = 300
            mostY_EASY = 332
            
            '''
            MEDIUM MOUSE_OVER STATICS
            '''
            leastX_MEDIUM = 340
            mostX_MEDIUM = 457
            leastY_MEDIUM = 347
            mostY_MEDIUM = 381
            
            '''
            HARD MOUSE_OVER STATICS
            '''
            leastX_HARD = 363
            mostX_HARD = 437
            leastY_HARD = 400
            mostY_HARD = 432
            
            '''
            BACK MOUSE_OVER STATICS
            '''
            leastX_DIFFICULTY_BACK = 64
            mostX_DIFFICULTY_BACK = 247
            leastY_DIFFICULTY_BACK = 693
            mostY_DIFFICULTY_BACK = 740
            
            (mouseX, mouseY) = pygame.mouse.get_pos()
            
            for settingsMenuEvent in pygame.event.get():
                    if settingsMenuEvent.type == pygame.MOUSEBUTTONDOWN:
                        
                        '''SET EASY DIFFICULTY'''
                        '''
                        @todo: I need to figure out how to display a confirmation of the change in difficulty settings.
                        '''
                        if(mouseX >= leastX_EASY and mouseX < mostX_EASY and mouseY >= leastY_EASY and mouseY < mostY_EASY):
                            GAME_DIFFICULTY = 1
                            '''Put logic here to adjust the game difficulty settings. Modify variables or call functions here to do the job.'''
                            menu.setState(SETTINGS)
                                
                        '''SET MEDIUM DIFFICULTY'''
                        if(mouseX >= leastX_MEDIUM and mouseX < mostX_MEDIUM and mouseY >= leastY_MEDIUM and mouseY < mostY_MEDIUM):
                            GAME_DIFFICULTY = 2
                            '''Put logic here to adjust the game difficulty settings. Modify variables or call functions here to do the job.'''
                            menu.setState(SETTINGS)
                            
                        '''SET HARD DIFFICULTY'''
                        if(mouseX >= leastX_HARD and mouseX < mostX_HARD and mouseY >= leastY_HARD and mouseY < mostY_HARD or keyboard[pygame.K_BACKSPACE] == True 
                           or keyboard[pygame.K_ESCAPE] == True):
                            GAME_DIFFICULTY = 3
                            '''Put logic here to adjust the game difficulty settings. Modify variables or call functions here to do the job.'''
                            menu.setState(SETTINGS)
                            
                        '''MAIN MENU STATE'''
                        if(mouseX >= leastX_DIFFICULTY_BACK and mouseX < mostX_DIFFICULTY_BACK and mouseY >= leastY_DIFFICULTY_BACK and mouseY < mostY_DIFFICULTY_BACK or keyboard[pygame.K_BACKSPACE] == True 
                           or keyboard[pygame.K_ESCAPE] == True):
                            menu.setState(MAIN)
                            
                            '''ALLOW EXIT'''
                    elif settingsMenuEvent.type == pygame.QUIT:
                        pygame.quit(); sys.exit();
            
            dispPlayerName = fontParagraph.render("Player: " + playerName, True, Color.gold)
            dispDifficultyTitle = fontTitle.render("Difficulty Menu", True, Color.white)
            dispDifficultyDirections = fontParagraph.render("Please choose one of the following: ", True, Color.white)
            dispDifficultyEasy = fontSubTitle.render("Easy", True, Color.white)
            dispDifficultyMedium = fontSubTitle.render("Medium", True, Color.white)
            dispDifficultyHard = fontSubTitle.render("Hard", True, Color.white)
            dispDifficultyBack = fontSubTitle.render("< Settings Menu", True, Color.white)
            
            screen.blit(dispPlayerName, ((SCREEN_WIDTH - dispPlayerName.get_width() - 5), 20))
            screen.blit(dispDifficultyTitle, (((SCREEN_WIDTH / 2) - dispDifficultyTitle.get_width() / 2), (SCREEN_HEIGHT / 2 - 250)))
            screen.blit(dispDifficultyDirections, (((SCREEN_WIDTH / 2)- dispDifficultyDirections.get_width()/2), (SCREEN_HEIGHT / 2 - 150)))
            screen.blit(dispDifficultyEasy, (((SCREEN_WIDTH / 2)- dispDifficultyEasy.get_width() / 2), (SCREEN_HEIGHT / 2 - 100)))
            screen.blit(dispDifficultyMedium, (((SCREEN_WIDTH / 2)- dispDifficultyMedium.get_width() / 2), (SCREEN_HEIGHT / 2 - 50)))
            screen.blit(dispDifficultyHard, (((SCREEN_WIDTH / 2)- dispDifficultyHard.get_width() / 2), (SCREEN_HEIGHT / 2)))
            screen.blit(dispDifficultyBack, (((SCREEN_WIDTH / 5)- dispSettingsBack.get_width() / 2), (SCREEN_HEIGHT - 100)))
        
        if(menu.getState() == REBIND_KEYS):
            screen.fill(Color.black)
            
            '''
            EASY MOUSE_OVER STATICS
            '''
            leastX_LEFT = 365
            mostX_LEFT = 433
            leastY_LEFT = 300
            mostY_LEFT = 332
            
            '''
            MEDIUM MOUSE_OVER STATICS
            '''
            leastX_RIGHT = 340
            mostX_RIGHT = 457
            leastY_RIGHT = 347
            mostY_RIGHT = 381
            
            '''
            SETTINGS MOUSE_OVER STATICS
            '''
            leastX_SETTINGS_BACK = 64
            mostX_SETTINGS_BACK = 247
            leastY_SETTINGS_BACK = 693
            mostY_SETTINGS_BACK = 740
            
            (mouseX, mouseY) = pygame.mouse.get_pos()
            
            dispRemapDirections = fontParagraph.render("Please press a key to remap [key].", True, Color.white)
            screen.blit(dispRemapDirections,(((SCREEN_WIDTH / 2) - dispRemapDirections.get_width() / 2 - 20), (SCREEN_HEIGHT / 2 - 175)))
            
            dispPlayerName = fontParagraph.render("Player: " + playerName, True, Color.gold)
            dispRemapTitle = fontTitle.render("Remap Keys", True, Color.white)
            dispRemapBack = fontSubTitle.render("< Settings Menu", True, Color.white)
            dispRemapProfile1 = fontSubTitle.render("[Key 1]", True, Color.white)
            dispReMapProfile2 = fontSubTitle.render("[Key 2]", True, Color.white)
            screen.blit(dispRemapProfile1, (((SCREEN_WIDTH / 2)- dispRemapProfile1.get_width() / 2), (SCREEN_HEIGHT / 2 - 100)))
            screen.blit(dispReMapProfile2, (((SCREEN_WIDTH / 2)- dispReMapProfile2.get_width() / 2), (SCREEN_HEIGHT / 2 - 50)))
            screen.blit(dispPlayerName, ((SCREEN_WIDTH - dispPlayerName.get_width() - 5), 20))
            screen.blit(dispRemapTitle, (((SCREEN_WIDTH / 2) - dispRemapTitle.get_width() / 2), (SCREEN_HEIGHT / 2 - 250)))
            screen.blit(dispRemapBack, (((SCREEN_WIDTH / 5)- dispRemapBack.get_width() / 2), (SCREEN_HEIGHT - 100)))
            
            for rebindMenuEvent in pygame.event.get():
                if rebindMenuEvent.type == pygame.MOUSEBUTTONDOWN:
                    
                    '''Change the LEFT direction of the paddle'''
                    if(mouseX >= leastX_LEFT and mouseX < mostX_LEFT and mouseY >= leastY_LEFT and mouseY < mostY_LEFT):
                        flag = False
                        preTime = pygame.time.get_ticks()
                        delay = 5000
                        pygame.event.clear()
                        screen.fill(Color.black)
                                                
                        while(flag == False):
                            loopStartTimer = pygame.time.get_ticks()
                            
                            if(loopStartTimer > preTime + delay): #get_ticks - startTime >= delay
                                flag = True
                            
                            dispRemapDirections = fontParagraph.render("Please press a key to remap [key].", True, Color.white)
                            screen.blit(dispRemapDirections,(((SCREEN_WIDTH / 2) - dispRemapDirections.get_width() / 2 - 20), (SCREEN_HEIGHT / 2 - 175)))
                            
                            dispPlayerName = fontParagraph.render("Player: " + playerName, True, Color.gold)
                            dispRemapTitle = fontTitle.render("Remap Keys", True, Color.white)
                            dispRemapBack = fontSubTitle.render("< Settings Menu", True, Color.white)
                            dispRemapProfile1 = fontSubTitle.render("Waiting...", True, Color.white)
                            dispReMapProfile2 = fontSubTitle.render("[Key 2]", True, Color.white)
                            screen.blit(dispRemapProfile1, (((SCREEN_WIDTH / 2)- dispRemapProfile1.get_width() / 2), (SCREEN_HEIGHT / 2 - 100)))
                            screen.blit(dispReMapProfile2, (((SCREEN_WIDTH / 2)- dispReMapProfile2.get_width() / 2), (SCREEN_HEIGHT / 2 - 50)))
                            screen.blit(dispPlayerName, ((SCREEN_WIDTH - dispPlayerName.get_width() - 5), 20))
                            screen.blit(dispRemapTitle, (((SCREEN_WIDTH / 2) - dispRemapTitle.get_width() / 2), (SCREEN_HEIGHT / 2 - 250)))
                            screen.blit(dispRemapBack, (((SCREEN_WIDTH / 5)- dispRemapBack.get_width() / 2), (SCREEN_HEIGHT - 100)))
                            #(mouseX, mouseY) = pygame.mouse.get_pos()
                            
                            if(menu.wasAnyKeyPressed()):
                                flag = True
                                
                    '''Change the RIGHT direction of the paddle'''
                    if(mouseX >= leastX_RIGHT and mouseX < mostX_RIGHT and mouseY >= leastY_RIGHT and mouseY < mostY_RIGHT):
                        flag = False
                        preTime = pygame.time.get_ticks()
                        delay = 5000
                        pygame.event.clear()
                                                
                        while(flag == False):
                            screen.fill(Color.black)
                            loopStartTimer = pygame.time.get_ticks()
                            
                            if(loopStartTimer > preTime + delay): #get_ticks - startTime >= delay
                                flag = True
                            
                            dispRemapDirections = fontParagraph.render("Please press a key to remap [key].", True, Color.white)
                            screen.blit(dispRemapDirections,(((SCREEN_WIDTH / 2) - dispRemapDirections.get_width() / 2 - 20), (SCREEN_HEIGHT / 2 - 175)))
                            
                            dispPlayerName = fontParagraph.render("Player: " + playerName, True, Color.gold)
                            dispRemapTitle = fontTitle.render("Remap Keys", True, Color.white)
                            dispRemapBack = fontSubTitle.render("< Settings Menu", True, Color.white)
                            dispRemapProfile1 = fontSubTitle.render("[Key 1]", True, Color.white)
                            dispReMapProfile2 = fontSubTitle.render("Waiting...", True, Color.white)
                            screen.blit(dispRemapProfile1, (((SCREEN_WIDTH / 2)- dispRemapProfile1.get_width() / 2), (SCREEN_HEIGHT / 2 - 100)))
                            screen.blit(dispReMapProfile2, (((SCREEN_WIDTH / 2)- dispReMapProfile2.get_width() / 2), (SCREEN_HEIGHT / 2 - 50)))
                            screen.blit(dispPlayerName, ((SCREEN_WIDTH - dispPlayerName.get_width() - 5), 20))
                            screen.blit(dispRemapTitle, (((SCREEN_WIDTH / 2) - dispRemapTitle.get_width() / 2), (SCREEN_HEIGHT / 2 - 250)))
                            screen.blit(dispRemapBack, (((SCREEN_WIDTH / 5)- dispRemapBack.get_width() / 2), (SCREEN_HEIGHT - 100)))
                            #(mouseX, mouseY) = pygame.mouse.get_pos()
                            
                            if(menu.wasAnyKeyPressed()):
                                flag = True
                    
                    '''SETTINGS STATE'''
                    if(mouseX >= leastX_SETTINGS_BACK and mouseX < mostX_SETTINGS_BACK and mouseY >= leastY_SETTINGS_BACK and mouseY < mostY_SETTINGS_BACK or keyboard[pygame.K_BACKSPACE] == True
                       or keyboard[pygame.K_ESCAPE] == True):
                        menu.setState(SETTINGS)
                        
                    '''ALLOW EXIT'''
                elif rebindMenuEvent.type == pygame.QUIT:
                    pygame.quit(); sys.exit();
                    
        if(menu.getState() == CREDITS):     
            '''
            SETTINGS MOUSE_OVER STATICS
            '''
            leastX_CREDITS_BACK = 54
            mostX_CREDITS_BACK = 262
            leastY_CREDITS_BACK = 696
            mostY_CREDITS_BACK = 732
            
            (mouseX, mouseY) = pygame.mouse.get_pos()
            
            for event in pygame.event.get():
                if event.type == pygame.MOUSEBUTTONDOWN:
                    
                    '''MAIN STATE'''
                    if(mouseX >= leastX_CREDITS_BACK and mouseX < mostX_CREDITS_BACK and mouseY >= leastY_CREDITS_BACK and mouseY < mostY_CREDITS_BACK or keyboard[pygame.K_BACKSPACE] == True
                       or keyboard[pygame.K_ESCAPE] == True):
                        menu.setState(MAIN)
                        
                    '''ALLOW EXIT'''
                elif(event.type == pygame.QUIT):
                    pygame.quit; sys.exit();
            
            dispPlayerName = fontParagraph.render("Player: " + playerName, True, Color.gold)
            dispCreditsTitle = fontTitle.render("Credits", True, Color.white)
            dispCreditsPargraph = fontParagraph.render("Programmed by Taylor Flatt, Mike Fleming, Marty Grawe, Devonte Morton", True, Color.orange)
            dispCreditsBack = fontSubTitle.render("< Main Menu", True, Color.white)
            
            screen.blit(dispPlayerName, ((SCREEN_WIDTH - dispPlayerName.get_width() - 5), 20))
            screen.blit(dispCreditsTitle, (((SCREEN_WIDTH / 2) - dispCreditsTitle.get_width() / 2), (SCREEN_HEIGHT / 2 - 250)))
            screen.blit(dispCreditsPargraph,(((SCREEN_WIDTH / 2) - dispCreditsPargraph.get_width() / 2 - 20), (SCREEN_HEIGHT / 2 - 150)))
            screen.blit(dispCreditsBack, (((SCREEN_WIDTH / 5)- dispCreditsBack.get_width() / 2), (SCREEN_HEIGHT - 100)))
                
        if(menu.getState() == GAME):
            
            '''
            This is your game state. Your game logic will be called within this state. Need to make sure you poll events for a 'pause' key event to change states to paused.
            '''

        if(menu.getState() == PAUSED):
            '''
            This is your paused state. 
            '''
            
            '''
            @todo: The plan is to add the following items to the paused menu:
                Return to Game
                Settings (With the ability to save the changes)
                Save (Maybe just saves the user's score. The scope of this project is small enough to even disable this option).
                Restart (Reloops the GAME state)
                Quit Main Menu (Drops us to MAIN and need to make sure items in GAME state are destroyed)
                Quit Desktop (Just exits the game, trivial)
                
            @todo: The menu items will be selected based on cursor selection. So it will follow similar logic to the main menus. Need to determine a game size 
            before continuing here. But the only difficulty would be allowing the user to change the settings and committing those changes to the game whilst 
            maintaining the integrity of the game.
            '''
            
        if(menu.getState() == GAME_OVER):
            dispGameOver = fontTitle.render("Game Over", True, Color.orange)
            
            '''Conditional to Win'''
            dispMessage = fontTitle.render("You Win!", True, Color.green)
            ''' '''
            
            '''Conditional to Lose'''
            dispMessage = fontTitle.render("You Lose!", True, Color.red)
            ''' '''
            
            screen.blit(dispGameOver, ((SCREEN_WIDTH / 2) - dispGameOver.get_width() / 2, (dispGameOver.get_height() - dispGameOver.get_height())))
            screen.blit(dispMessage, ((SCREEN_WIDTH / 2) - dispGameOver.get_width() / 2 + 5, (SCREEN_HEIGHT / 2 - dispGameOver.get_height() * 4 - dispGameOver.get_height() * 4)))
                
        pygame.display.update()
        
        '''ALLOW EXIT'''
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit(); sys.exit();
                
if __name__ == '__main__':
    main()
